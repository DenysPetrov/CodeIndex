@page "/Details/{CodePK}/{IndexName}"
@page "/Details/{CodePK}/{IndexName}/{ContentQuery}"
@inject HttpClient Client
@inject CodeIndexConfiguration Config
@inject IndexManagement IndexManagement

<div class="jumbotron">
    <h1 class="display-4">Details For @Source?.FileName</h1>
    <p class="lead">Extension: @Source?.FileExtension | Index Date: @Source?.IndexDate | Last Write Time Utc: @Source?.LastWriteTimeUtc</p>
    <hr class="my-4">
    <p>File Path: <a href="@CurrentIndexConfig.OpenIDEUriFormat.Replace("{FilePath}", GetPath(Source?.FilePath))">@Source?.FilePath</a></p>
    <hr class="my-4">
    <p>Content:</p>
    <p>
        <pre>@((MarkupString)Source?.Content)</pre>
    </p>
</div>

@code {
    [Parameter]
    public string CodePK { get; set; }

    [Parameter]
    public string ContentQuery { get; set; }

    [Parameter]
    public string IndexName { get; set; }

    IndexConfigForView currentIndexConfig;
    public IndexConfigForView CurrentIndexConfig
    {
        get
        {
            if (currentIndexConfig == null)
            {
                currentIndexConfig = IndexManagement.GetIndexView(IndexName);
            }

            return currentIndexConfig;
        }
    }

    public CodeSource Source { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await Client.GetJsonAsync<FetchResult<IEnumerable<CodeSource>>>($"{Config.LocalUrl}api/lucene/GetCodeSources?searchQuery=" + System.Web.HttpUtility.UrlEncode($"CodePK:\"{CodePK}\"") + "&contentQuery=" + ContentQuery + "&indexName=" + IndexName);
        Source = result.Result.FirstOrDefault();
        await base.OnInitializedAsync();
    }

    string GetPath(string path)
    {
        if (path != null && path.StartsWith("/monitorfolder") && !string.IsNullOrEmpty(CurrentIndexConfig.MonitorFolderRealPath))
        {
            return CurrentIndexConfig.MonitorFolderRealPath + path.SubStringSafe("/monitorfolder".Length, path.Length);
        }
        else
        {
            return path;
        }
    }
}
