@page "/"
@inject HttpClient Client
@inject CodeIndex.Common.Storage Storage
@inject CodeIndexConfiguration Config

<div class="row">
    <div class="col-sm">
        <h3>Search Page</h3>
    </div>
</div>
<div class="row">
    <div class="col-sm">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">Content</span>
            </div>
            <input type="text" class="form-control" placeholder="Put Your Content Here" aria-label="Put Your Content Here" @bind-value="@ContentQuery" @bind-value:event="oninput" @onkeyup="@(async e => await KeyPressForContent(e))" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">File Name</span>
            </div>
            <input type="text" class="form-control" placeholder="Put Your File Name Here" aria-label="Put Your File Name Here" @bind-value="@FileNameQuery" @bind-value:event="oninput" @onkeydown="@(async e => await KeyPress(e))" />
        </div>
    </div>
    <div class="col-sm">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">File Extension</span>
            </div>
            <input type="text" class="form-control" placeholder="Put Your File Extension Here" aria-label="Put Your File Extension Here" @bind-value="@FileExtensionQuery" @bind-value:event="oninput" @onkeydown="@(async e => await KeyPress(e))" />
        </div>
    </div>
    <div class="col-sm">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">File Location</span>
            </div>
            <input type="text" class="form-control" placeholder="Put Your File Path Here" aria-label="Put Your File Path Here" @bind-value="@FilePathQuery" @bind-value:event="oninput" @onkeydown="@(async e => await KeyPress(e))" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm">
        <div class="input-group mb-3">
            <button type="button" class="btn btn-primary" @onclick="SearchLuceneIndex">Search</button>
        </div>
    </div>
    <div class="col-sm">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">Index Name</span>
            </div>
            <select class="form-control" @bind="IndexPk">
                @if (IndexConfigs != null)
                {
                    foreach (var indexConfig in IndexConfigs)
                    {
                        <option value="@indexConfig.Pk">@indexConfig.IndexName</option>
                    }
                }
            </select>
        </div>
    </div>
    <div class="col-sm">
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text">Show Results</span>
            </div>
            <select class="form-control" @bind="ShowResults">
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-4">
        <div class="input-group mb-3">
            @if (!FetchResult?.Status?.Success ?? false)
            {
                <div class="alert alert-danger" role="alert">
                    @FetchResult.Status.StatusDesc
                </div>
            }
            else if (FetchResult?.Status?.Success ?? false)
            {
                <div class="alert alert-success" role="alert">
                    Post Success, Find Results: @FetchResult?.Result?.Count()
                </div>
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    Waiting For Search
                </div>
            }
        </div>
    </div>
    <div class="col-sm-8">
        <div class="input-group mb-3">
            @if (!HintWords?.Status?.Success ?? false)
            {
                <div class="alert alert-danger" role="alert">
                    @HintWords.Status.StatusDesc
                </div>
            }
            else if (HintWords?.Status?.Success ?? false)
            {
                <div class="alert alert-success" role="alert">
                    @if (HintWords.Result.Any())
                    {
                        <text>Find Hints: @string.Join(", ", HintWords.Result)</text>
                    }
                    else
                    {
                        <text>No Hint</text>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    Wait Input
                </div>
            }
        </div>
    </div>
</div>
<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">File Name</th>
                <th scope="col">Match Info</th>
                <th scope="col">File Path</th>
                <th scope="col">File Extension</th>
                <th scope="col">Details</th>
            </tr>
        </thead>
        <tbody>
            @if (FetchResult?.Result != null && FetchResult.Result.Any())
            {
                foreach (var item in FetchResult.Result)
                {
                    <tr>
                        <td title="@item.Info">@item.FileName</td>
                        <td>
                            <pre>@((MarkupString)item.Content)</pre>
                        </td>
                        <td>

                            <a href=" @RazorPageUtils.GetOpenIDEUri(CurrentIndexConfig.OpenIDEUriFormat, item.FilePath, CurrentIndexConfig.MonitorFolderRealPath)">@item.FilePath?.SubStringSafeWithEllipsis(item.FilePath.Length - 50, 50)</a>
                        </td>
                        <td>@item.FileExtension</td>
                        <td>
                            <a href="/Details/@item.CodePK/@IndexPk.ToString()/@System.Web.HttpUtility.UrlEncode(ContentQuery ?? string.Empty)">Details</a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center">Empty</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {

    public string SearchQuery => MaintainIndex.QueryGenerator.GetSearchStr(FileNameQuery, ContentQuery, FileExtensionQuery, FilePathQuery);

    public string ContentQuery { get; set; }

    public string FileNameQuery { get; set; }

    public string FileExtensionQuery { get; set; }

    public string FilePathQuery { get; set; }

    public Guid IndexPk { get; set; }

    public int ShowResults { get; set; } = 20;

    public FetchResult<IEnumerable<CodeSource>> FetchResult { get; set; }

    public FetchResult<IEnumerable<string>> HintWords { get; set; }

    public IndexConfigForView[] IndexConfigs { get; set; }

    public IndexConfigForView CurrentIndexConfig => IndexConfigs?.FirstOrDefault(u => u.Pk == IndexPk) ?? (empty ??= new IndexConfigForView());

    IndexConfigForView empty;

    bool IsSearching;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            var listResult = await Client.GetJsonAsync<FetchResult<IndexConfigForView[]>>($"{Config.LocalUrl}api/lucene/GetIndexViewList");
            if (listResult.Status.Success)
            {
                IndexConfigs = listResult.Result;
            }
            else
            {
                IndexConfigs = Array.Empty<IndexConfigForView>();
            }
        }
        catch
        {
            IndexConfigs = Array.Empty<IndexConfigForView>();
        }

        ContentQuery = Storage.GetValue("ContentQuery")?.ToString();
        FileNameQuery = Storage.GetValue("FileNameQuery")?.ToString();
        FileExtensionQuery = Storage.GetValue("FileExtensionQuery")?.ToString();
        FilePathQuery = Storage.GetValue("FilePathQuery")?.ToString();

        var indexPkStr = Storage.GetValue("IndexPk")?.ToString();
        Guid? indexPk = indexPkStr == null ? null : new Guid(indexPkStr);

        if (indexPk == null || IndexConfigs.All(u => u.Pk != indexPk))
        {
            IndexPk = IndexConfigs.FirstOrDefault()?.Pk ?? Guid.Empty;
        }
        else
        {
            IndexPk = indexPk.Value;
        }

        if (int.TryParse(Storage.GetValue(nameof(ShowResults))?.ToString(), out var result))
        {
            ShowResults = result;
        }

        if (!string.IsNullOrEmpty(SearchQuery) && IndexPk != Guid.Empty)
        {
            await SearchLuceneIndex();
        }
    }

    async Task SearchLuceneIndex()
    {
        if (IsSearching)
        {
            return;
        }

        Storage.SetOrUpdate("ContentQuery", ContentQuery);
        Storage.SetOrUpdate("IndexPk", IndexPk);
        Storage.SetOrUpdate("FileNameQuery", FileNameQuery);
        Storage.SetOrUpdate("FileExtensionQuery", FileExtensionQuery);
        Storage.SetOrUpdate("FilePathQuery", FilePathQuery);
        Storage.SetOrUpdate(nameof(ShowResults), ShowResults);

        IsSearching = true;
        FetchResult = null;

        try
        {
            if (!string.IsNullOrEmpty(SearchQuery) && IndexPk != Guid.Empty)
            {
                FetchResult = await Client.GetJsonAsync<FetchResult<IEnumerable<CodeSource>>>($"{Config.LocalUrl}api/lucene/GetCodeSources?searchQuery=" + System.Web.HttpUtility.UrlEncode(SearchQuery) + "&showResults=" + ShowResults + "&preview=true" + "&contentQuery=" + System.Web.HttpUtility.UrlEncode(ContentQuery ?? string.Empty) + "&indexPk=" + IndexPk);
            }
            else
            {
                FetchResult = new FetchResult<IEnumerable<CodeSource>>()
                {
                    Status = new Status()
                    {
                        Success = false,
                        StatusDesc = "Search query or index name can't be empty"
                    }
                };
            }
        }
        finally
        {
            IsSearching = false;
        }
    }

    async Task KeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchLuceneIndex();
        }
    }

    async Task KeyPressForContent(KeyboardEventArgs e)
    {
        if (e.Key != "Enter" && ContentQuery != null && !ContentQuery.EndsWith(" ") && IndexPk != Guid.Empty)
        {
            var inputWord = ContentQuery.Split(" ", StringSplitOptions.RemoveEmptyEntries).LastOrDefault();
            if (inputWord?.Length >= 3)
            {
                HintWords = await Client.GetJsonAsync<FetchResult<IEnumerable<string>>>($"{Config.LocalUrl}api/lucene/GetHints?word=" + System.Web.HttpUtility.UrlEncode(inputWord) + "&indexPk=" + IndexPk);
            }
        }
        else
        {
            await KeyPress(e);
        }
    }
}
