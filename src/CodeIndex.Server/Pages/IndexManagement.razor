@page "/IndexManagement"
@inject HttpClient Client
@inject CodeIndexConfiguration Config
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-sm">
        <h3>Index Management</h3>
    </div>
</div>

<hr />

<h4>Stored Indexes</h4>

<div class="row">
    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="alert alert-danger" role="alert">
            @StatusMessage
        </div>
    }
</div>

<div class="row">

    @if (IndexStatusInfos != null)
    {
        foreach (var indexStatus in IndexStatusInfos)
        {
            <div class="col-md-3 p-1">
                <div class="card">
                    <div class="card-body">
                        <p>Name: @indexStatus.IndexConfig.IndexName</p>
                        <p>Status: @indexStatus.IndexStatus</p>
                        <p>Monitor Folder: @indexStatus.IndexConfig.MonitorFolder</p>
                        <button class="btn btn-primary btn-sm" @onclick="() => Edit(indexStatus)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => Delete(indexStatus)">Delete</button>
                    </div>
                </div>
            </div>
        }
    }
</div>

<hr />

<h4>
    Add or Edit Index Info
    <button type="button" class="btn btn-primary btn-sm" @onclick="SaveIndexInfo">Save Index Info</button>
</h4>

<div class="row">
    <div class="form-group col-md-4">
        <label for="IndexName">Index Name</label>
        <input type="text" class="form-control" id="IndexName" autocomplete="off" @bind-value="@IndexStatusInfoForEditOrAdd.IndexConfig.IndexName">
    </div>
    <div class="form-group col-md-4">
        <label for="MonitorFolder">Monitor Folder</label>
        <input type="text" class="form-control" id="MonitorFolder" autocomplete="off" @bind-value="@IndexStatusInfoForEditOrAdd.IndexConfig.MonitorFolder">
    </div>
    <div class="form-group col-md-4">
        <label for="MonitorFolderRealPath">Monitor Folder Real Path</label>
        <input type="text" class="form-control" id="MonitorFolderRealPath" autocomplete="off" @bind-value="@IndexStatusInfoForEditOrAdd.IndexConfig.MonitorFolderRealPath">
    </div>
    <div class="form-group col-md-4">
        <label for="OpenIDEUriFormat">Open IDE Uri Format</label>
        <input type="text" class="form-control" id="OpenIDEUriFormat" autocomplete="off" @bind-value="@IndexStatusInfoForEditOrAdd.IndexConfig.OpenIDEUriFormat">
    </div>
    <div class="form-group col-md-4">
        <label for="IncludedExtensions">Included Extensions</label>
        <input type="text" class="form-control" id="IncludedExtensions" autocomplete="off" @bind-value="@IndexStatusInfoForEditOrAdd.IndexConfig.IncludedExtensions">
    </div>
    <div class="form-group col-md-4">
        <label for="ExcludedExtensions">Excluded Extensions</label>
        <input type="text" class="form-control" id="ExcludedExtensions" autocomplete="off" @bind-value="@IndexStatusInfoForEditOrAdd.IndexConfig.ExcludedExtensions">
    </div>
    <div class="form-group col-md-4">
        <label for="ExcludedPaths">Excluded Paths</label>
        <input type="text" class="form-control" id="ExcludedPaths" autocomplete="off" @bind-value="@IndexStatusInfoForEditOrAdd.IndexConfig.ExcludedPaths">
    </div>
    <div class="form-group col-md-4">
        <label for="MaxContentHighlightLength">Max Content Highlight Length</label>
        <input type="number" class="form-control" id="MaxContentHighlightLength" autocomplete="off" @bind-value="@IndexStatusInfoForEditOrAdd.IndexConfig.MaxContentHighlightLength">
    </div>
    <div class="form-group col-md-4">
        <label for="SaveIntervalSeconds">Save Interval Seconds</label>
        <input type="number" class="form-control" id="SaveIntervalSeconds" autocomplete="off" @bind-value="@IndexStatusInfoForEditOrAdd.IndexConfig.SaveIntervalSeconds">
    </div>
</div>

@code {

    public List<IndexStatusInfo> IndexStatusInfos { get; set; } = new List<IndexStatusInfo>();

    public string StatusMessage { get; set; }

    public IndexStatusInfo IndexStatusInfoForEditOrAdd { get; set; } = new IndexStatusInfo(IndexStatus.Idle, new IndexConfig());

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await GetLists();
    }

    void Edit(IndexStatusInfo indexStatusInfo)
    {
        IndexStatusInfoForEditOrAdd = indexStatusInfo;
    }

    async Task SaveEdit(IndexStatusInfo indexStatusInfo)
    {
        try
        {
            var result = (await Client.PostJsonAsync<FetchResult<bool>>($"{Config.LocalUrl}api/management/editindex", indexStatusInfo.IndexConfig));
            if (result.Status.Success)
            {
                await GetLists();
            }
            else
            {
                StatusMessage = result.Status.StatusDesc;
            }
        }
        catch (Exception ex)
        {
            StatusMessage = ex.ToString();
            NavigateIfNotLogin(ex);
        }
    }

    async Task Delete(IndexStatusInfo indexStatusInfo)
    {
        try
        {
            var result = (await Client.PostJsonAsync<FetchResult<bool>>($"{Config.LocalUrl}api/management/deleteindex", indexStatusInfo.IndexConfig.IndexName));
            if (result.Status.Success)
            {
                await GetLists();
            }
            else
            {
                StatusMessage = result.Status.StatusDesc;
            }
        }
        catch (Exception ex)
        {
            StatusMessage = ex.ToString();
            NavigateIfNotLogin(ex);
        }
    }

    async Task SaveIndexInfo()
    {
        if (!IndexStatusInfos.Contains(IndexStatusInfoForEditOrAdd))
        {
            try
            {
                var result = (await Client.PostJsonAsync<FetchResult<bool>>($"{Config.LocalUrl}api/management/addindex", IndexStatusInfoForEditOrAdd.IndexConfig));
                if (result.Status.Success)
                {
                    await GetLists();
                }
                else
                {
                    StatusMessage = result.Status.StatusDesc;
                }
            }
            catch (Exception ex)
            {
                StatusMessage = ex.ToString();
                NavigateIfNotLogin(ex);
            }
        }
        else
        {
            await SaveEdit(IndexStatusInfoForEditOrAdd);
        }
    }

    async Task GetLists()
    {
        try
        {
            var result = (await Client.GetJsonAsync<FetchResult<IndexStatusInfo[]>>($"{Config.LocalUrl}api/management/GetIndexLists"));
            if (result.Status.Success)
            {
                IndexStatusInfos = result.Result.ToList();
            }
            else
            {
                StatusMessage = result.Status.StatusDesc;
            }
        }
        catch (Exception ex)
        {
            StatusMessage = ex.ToString();

            NavigateIfNotLogin(ex);
        }
    }

    void NavigateIfNotLogin(Exception ex)
    {
        if (ex is HttpRequestException exHttp)
        {
            if (exHttp.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                NavigationManager.NavigateTo("/Login");
            }
        }
    }
}
